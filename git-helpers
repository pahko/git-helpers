#!/bin/sh

# Clean up
unset -f _git_branches_both
unset -f checkout
unset -f cm
unset -f cmch
unset -f get_repo_user
unset -f git_branch
unset -f git_branch_p
unset -f issue_number
unset -f pull_request
unset -f utags
unset -f add
unset -f greset
unset -f newbranch
unalias branches 2> /dev/null
unalias gcommit 2> /dev/null
unalias gdiff 2> /dev/null
unalias gpull 2> /dev/null
unalias gpush 2> /dev/null
unalias gundo 2> /dev/null
unalias merge 2> /dev/null
unalias ours 2> /dev/null
unalias pull 2> /dev/null
unalias push 2> /dev/null
unalias st 2> /dev/null
unalias theirs 2> /dev/null

USE_CTAGS="true"
TAB_COMPLETE_REMOTE_BRANCHES="true"

# List all branches, local and remote
alias branches='git branch -a | sed -Ee "s:^\*? *::" | sed -Ee "s:^(remotes/)?origin/::g" | grep -v "HEAD -> origin/master" | sort | uniq'

# some cool shortcuts
alias gcommit='git commit -m'
alias gdiff='git diff'
alias gpull='git pull'
alias gpush='git push $@ --all origin'
alias grm='git rm $@ && git status'
alias gundo='git reset --soft HEAD^ && git status'
alias merge='git merge'
alias ours='git checkout --ours'
alias pull='git pull $@ origin $(git_branch)'  # pull changes to current branch
alias push='git push -u $@ origin $(git_branch)'  # push only current branch
alias st='git status'
alias theirs='git checkout --theirs'

add() {
    what="$@"
    if [[ -z $what ]]; then
        what='.'
    fi
    git add $what && git status
}

greset() {
    what="$@"
    if [[ -z $what ]]; then
        what='.'
    fi
    git reset HEAD $what && git status
}

# Get current branch name or commit
git_branch() {
    branch=`git symbolic-ref HEAD 2>/dev/null | sed -e 's|^refs/heads/||'`
    if [[ -z $branch ]]; then
        branch=`git rev-parse --short HEAD 2>/dev/null`
    fi
    echo $branch
}

# the same as git_branch but without line break
git_branch_p() {
    branch=`git_branch`
    if [[ -n $branch ]]; then
        printf " $branch"
    fi
}
# Intelligent wrapper around git checkout.
#
# With this, you don't need to worry about whether you've checked
# out the branch before or not, whether you've set it up for remote
# tracking, or the syntax for creating a new branch from any other
# ref, remote or local.
checkout() {
    usage="Usage: checkout [-f] [-r] WHAT [FROM]

      WHAT  Ref to check out, or branch name to create
      FROM  If creating a new branch, what ref to create it from
            (e.g., master, HEAD, branch, tag) (defaults to master)
"
    new=
    old='master'
    cur=$(git_branch)
    file=

    if [[ -z $cur ]]; then
        echo "Not in a git repository"
        return 1
    fi

    while [ "$1" ]; do
        case $1 in
            -h) echo "$usage"; return;;
            -f) file=true;;
            *)
                if [[ -z $new ]]; then
                    new=$1
                else
                    old=$1
                fi
                ;;
        esac
        shift
    done

    if [[ -z $new ]]; then
        echo "Missing required argument"
        echo "$usage"
        return 1
    fi

    if [[ -e $new && -n $file ]]; then
        echo -n "Confirm reset file? [y/N] "
        read confirm
        if [[ "$confirm" =~ [Yy] ]]; then
            git checkout -f $new
        fi
        return
    fi

    exists_locally=$(git rev-parse --verify -q $new)
    exists_remotely=$(git rev-parse --verify -q origin/$new)

    if [[ -n $exists_locally ]]; then
        if [[ "$new" != "$cur" ]]; then
            git checkout $new
            if [ $? -gt 0 ]; then
                return $?
            fi
        fi
    elif [[ -n $exists_remotely ]]; then
        git checkout -b $new origin/$new
        if [ $? -gt 0 ]; then
            return $?
        fi
    else
        echo -n "Confirm new branch? [Y/n] "
        read confirm
        if [[ "$confirm" =~ [Nn] ]]; then
            return
        fi

        git checkout -b $new $old
        if [ $? -gt 0 ]; then
            return $?
        fi
        echo "New branch $new created from $old"
    fi

    if [[ -z `git config branch.$new.remote` ]]; then
        git config branch.$new.remote origin
        if [ $? -gt 0 ]; then
            return $?
        fi
    fi
    if [[ -z `git config branch.$new.merge` ]]; then
        git config branch.$new.merge refs/heads/$new
        if [ $? -gt 0 ]; then
            return $?
        fi
        echo "Branch set up to track remote"
    fi
    utags
}

utags() {
    if [[ "$USE_CTAGS" != "true" ]]; then
        return
    fi
    pushd . > /dev/null
    while [ ! -e .git ]; do
        cd ..
    done
    (ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . 2> /dev/null &)
    popd > /dev/null
}

if [[ -e /usr/local/git/contrib/completion/git-completion.bash ]]; then
    source /usr/local/git/contrib/completion/git-completion.bash

    _git_branches_both() {
        __gitcomp "$(branches)"
    }

    commands="checkout merge"
    if [[ "$TAB_COMPLETE_REMOTE_BRANCHES" == "true" ]]; then
        for cmd in $commands; do
            complete -o default -o nospace -F _git_branches_both $cmd
        done
    else
        for cmd in $commands; do
            complete -o default -o nospace -F _git_checkout $cmd
        done
    fi
fi

red(){
    printf "\033[1;31m$*\033[0m"
}
green(){
    printf "\033[1;32m$*\033[0m"
}
yellow(){
    printf "\033[1;33m$*\033[0m"
}
white(){
    printf "\033[1;37m$*\033[0m"
}

issue_number() {
    branch='git_branch'
    issue=`$branch | cut -d"/" -f2 | cut -d"-" -f1`
    echo $issue
}

get_repo_user() {
    git remote -v | grep origin | cut -d":" -f2 | cut -d"/" -f1 | head -1
}

pull_request() {
    branch=`git_branch`
    issue_number=`issue_number`
    repo_user=`get_repo_user`
    hub pull-request -i $issue_number -h $repo_user:$branch
}

cm() {
    message="$@"
    issue_number=`issue_number`
    git commit -m "Issue # $issue_number - $message"
}

newbranch () {
    initials=$INITIALS
    issue_num="$1"
    if ! [[ "$issue_num" =~ ^.+\-[0-9]+$ ]] ; then
        echo "ERROR: $issue_num is not a valid issue number."
        return
    fi
    description="$2"
    if [[ -z $description ]]; then
        echo "ERROR: You need to provide a description"
        return
    fi

    new_branch_name="$USER_INITIALS-$issue_num-$description"
    git checkout -b $new_branch_name
 }
